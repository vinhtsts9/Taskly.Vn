// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user-userbase.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const checkRefreshToken = `-- name: CheckRefreshToken :one
SELECT user_base_id FROM user_base WHERE refresh_token = $1
`

func (q *Queries) CheckRefreshToken(ctx context.Context, refreshToken string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, checkRefreshToken, refreshToken)
	var user_base_id uuid.UUID
	err := row.Scan(&user_base_id)
	return user_base_id, err
}

const checkUserExist = `-- name: CheckUserExist :one
SELECT EXISTS(SELECT 1 FROM user_base WHERE email = $1)
`

func (q *Queries) CheckUserExist(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUserExist, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUserBase = `-- name: CreateUserBase :one
INSERT INTO user_base (passwords,email,salt)
VALUES ($1,$2,$3)
RETURNING user_base_id
`

type CreateUserBaseParams struct {
	Passwords string
	Email     string
	Salt      string
}

func (q *Queries) CreateUserBase(ctx context.Context, arg CreateUserBaseParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createUserBase, arg.Passwords, arg.Email, arg.Salt)
	var user_base_id uuid.UUID
	err := row.Scan(&user_base_id)
	return user_base_id, err
}

const createUserProfile = `-- name: CreateUserProfile :one
INSERT INTO users (user_base_id, names, profile_pic, bio)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type CreateUserProfileParams struct {
	UserBaseID uuid.UUID
	Names      string
	ProfilePic sql.NullString
	Bio        sql.NullString
}

func (q *Queries) CreateUserProfile(ctx context.Context, arg CreateUserProfileParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createUserProfile,
		arg.UserBaseID,
		arg.Names,
		arg.ProfilePic,
		arg.Bio,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteUserBase = `-- name: DeleteUserBase :exec
DELETE FROM user_base WHERE user_base_id = $1
`

func (q *Queries) DeleteUserBase(ctx context.Context, userBaseID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserBase, userBaseID)
	return err
}

const getUserBaseToCheckLogin = `-- name: GetUserBaseToCheckLogin :one
SELECT user_base_id, salt, passwords
FROM user_base
WHERE email = $1
`

type GetUserBaseToCheckLoginRow struct {
	UserBaseID uuid.UUID
	Salt       string
	Passwords  string
}

func (q *Queries) GetUserBaseToCheckLogin(ctx context.Context, email string) (GetUserBaseToCheckLoginRow, error) {
	row := q.db.QueryRowContext(ctx, getUserBaseToCheckLogin, email)
	var i GetUserBaseToCheckLoginRow
	err := row.Scan(&i.UserBaseID, &i.Salt, &i.Passwords)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, user_base_id, names, profile_pic, bio, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserBaseID,
		&i.Names,
		&i.ProfilePic,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserInfoToSetToken = `-- name: GetUserInfoToSetToken :one
SELECT 
    u.id, u.names, u.profile_pic, u.bio,
    u.created_at, u.updated_at
FROM users u
JOIN user_base b ON u.user_base_id = b.user_base_id
WHERE b.user_base_id = $1
`

type GetUserInfoToSetTokenRow struct {
	ID         uuid.UUID
	Names      string
	ProfilePic sql.NullString
	Bio        sql.NullString
	CreatedAt  time.Time
	UpdatedAt  time.Time
}

func (q *Queries) GetUserInfoToSetToken(ctx context.Context, userBaseID uuid.UUID) (GetUserInfoToSetTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getUserInfoToSetToken, userBaseID)
	var i GetUserInfoToSetTokenRow
	err := row.Scan(
		&i.ID,
		&i.Names,
		&i.ProfilePic,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateLoginInfo = `-- name: UpdateLoginInfo :exec
UPDATE user_base
SET login_time = CURRENT_TIMESTAMP,
    login_ip = $2,
    states = 1
WHERE email = $1
`

type UpdateLoginInfoParams struct {
	Email   string
	LoginIp string
}

func (q *Queries) UpdateLoginInfo(ctx context.Context, arg UpdateLoginInfoParams) error {
	_, err := q.db.ExecContext(ctx, updateLoginInfo, arg.Email, arg.LoginIp)
	return err
}

const updateLogoutInfo = `-- name: UpdateLogoutInfo :exec
UPDATE user_base
SET logout_time = CURRENT_TIMESTAMP,
    states = 3
WHERE user_base_id = $1
`

func (q *Queries) UpdateLogoutInfo(ctx context.Context, userBaseID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, updateLogoutInfo, userBaseID)
	return err
}

const updateUserBaseToken = `-- name: UpdateUserBaseToken :exec
UPDATE user_base
SET refresh_token = $2
WHERE user_base_id = $1
`

type UpdateUserBaseTokenParams struct {
	UserBaseID   uuid.UUID
	RefreshToken string
}

func (q *Queries) UpdateUserBaseToken(ctx context.Context, arg UpdateUserBaseTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateUserBaseToken, arg.UserBaseID, arg.RefreshToken)
	return err
}

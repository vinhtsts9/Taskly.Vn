// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rbac.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addPermissionToRole = `-- name: AddPermissionToRole :exec
INSERT INTO role_permissions (role_id, permission_id)
VALUES ($1, $2)
`

type AddPermissionToRoleParams struct {
	RoleID       uuid.UUID
	PermissionID uuid.UUID
}

func (q *Queries) AddPermissionToRole(ctx context.Context, arg AddPermissionToRoleParams) error {
	_, err := q.db.ExecContext(ctx, addPermissionToRole, arg.RoleID, arg.PermissionID)
	return err
}

const addRoleToUser = `-- name: AddRoleToUser :exec
INSERT INTO user_roles (user_id, role_id)
VALUES ($1, $2)
`

type AddRoleToUserParams struct {
	UserID uuid.UUID
	RoleID uuid.UUID
}

func (q *Queries) AddRoleToUser(ctx context.Context, arg AddRoleToUserParams) error {
	_, err := q.db.ExecContext(ctx, addRoleToUser, arg.UserID, arg.RoleID)
	return err
}

const createPermission = `-- name: CreatePermission :one
INSERT INTO permissions (name, resource, action)
VALUES ($1, $2, $3)
RETURNING id, name, resource, action, created_at, updated_at
`

type CreatePermissionParams struct {
	Name     string
	Resource string
	Action   string
}

func (q *Queries) CreatePermission(ctx context.Context, arg CreatePermissionParams) (Permission, error) {
	row := q.db.QueryRowContext(ctx, createPermission, arg.Name, arg.Resource, arg.Action)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Resource,
		&i.Action,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createRole = `-- name: CreateRole :one
INSERT INTO roles (role_name)
VALUES ($1)
RETURNING id, role_name, created_at, updated_at
`

func (q *Queries) CreateRole(ctx context.Context, roleName string) (Role, error) {
	row := q.db.QueryRowContext(ctx, createRole, roleName)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.RoleName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPermissionsByRoleID = `-- name: GetPermissionsByRoleID :many
SELECT p.id, p.name, p.resource, p.action, p.created_at, p.updated_at
FROM permissions p
JOIN role_permissions rp ON p.id = rp.permission_id
WHERE rp.role_id = $1
`

func (q *Queries) GetPermissionsByRoleID(ctx context.Context, roleID uuid.UUID) ([]Permission, error) {
	rows, err := q.db.QueryContext(ctx, getPermissionsByRoleID, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Resource,
			&i.Action,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPermissionsByUserID = `-- name: GetPermissionsByUserID :many
SELECT p.id, p.name, p.resource, p.action, p.created_at, p.updated_at
FROM permissions p
JOIN role_permissions rp ON p.id = rp.permission_id
JOIN user_roles ur ON rp.role_id = ur.role_id
WHERE ur.user_id = $1
`

func (q *Queries) GetPermissionsByUserID(ctx context.Context, userID uuid.UUID) ([]Permission, error) {
	rows, err := q.db.QueryContext(ctx, getPermissionsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Resource,
			&i.Action,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoleIdByRoleName = `-- name: GetRoleIdByRoleName :one
SELECT id FROM roles WHERE role_name = $1
`

func (q *Queries) GetRoleIdByRoleName(ctx context.Context, roleName string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getRoleIdByRoleName, roleName)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getRolesByUserID = `-- name: GetRolesByUserID :many
SELECT r.id, r.role_name, r.created_at, r.updated_at
FROM roles r
JOIN user_roles ur ON r.id = ur.role_id
WHERE ur.user_id = $1
`

func (q *Queries) GetRolesByUserID(ctx context.Context, userID uuid.UUID) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, getRolesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.RoleName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersByType = `-- name: ListUsersByType :many
SELECT id, role_name, created_at, updated_at FROM roles WHERE role_name = $1
`

func (q *Queries) ListUsersByType(ctx context.Context, roleName string) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, listUsersByType, roleName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.RoleName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removePermissionFromRole = `-- name: RemovePermissionFromRole :exec
DELETE FROM role_permissions
WHERE role_id = $1 AND permission_id = $2
`

type RemovePermissionFromRoleParams struct {
	RoleID       uuid.UUID
	PermissionID uuid.UUID
}

func (q *Queries) RemovePermissionFromRole(ctx context.Context, arg RemovePermissionFromRoleParams) error {
	_, err := q.db.ExecContext(ctx, removePermissionFromRole, arg.RoleID, arg.PermissionID)
	return err
}

const removeRoleFromUser = `-- name: RemoveRoleFromUser :exec
DELETE FROM user_roles
WHERE user_id = $1 AND role_id = $2
`

type RemoveRoleFromUserParams struct {
	UserID uuid.UUID
	RoleID uuid.UUID
}

func (q *Queries) RemoveRoleFromUser(ctx context.Context, arg RemoveRoleFromUserParams) error {
	_, err := q.db.ExecContext(ctx, removeRoleFromUser, arg.UserID, arg.RoleID)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: order.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const acceptOrderCompletion = `-- name: AcceptOrderCompletion :exec
UPDATE orders
SET status = 'completed'
WHERE id = $1 AND status = 'delivered'
`

func (q *Queries) AcceptOrderCompletion(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, acceptOrderCompletion, id)
	return err
}

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (gig_id, buyer_id, seller_id, total_price, delivery_date,idempotency_key,status)
VALUES ($1, $2, $3, $4, $5,$6,'pending')
RETURNING id, gig_id, buyer_id, seller_id, status, total_price, order_date, delivery_date, idempotency_key, created_at, updated_at
`

type CreateOrderParams struct {
	GigID          uuid.UUID
	BuyerID        uuid.UUID
	SellerID       uuid.UUID
	TotalPrice     float64
	DeliveryDate   sql.NullTime
	IdempotencyKey string
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.GigID,
		arg.BuyerID,
		arg.SellerID,
		arg.TotalPrice,
		arg.DeliveryDate,
		arg.IdempotencyKey,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.GigID,
		&i.BuyerID,
		&i.SellerID,
		&i.Status,
		&i.TotalPrice,
		&i.OrderDate,
		&i.DeliveryDate,
		&i.IdempotencyKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderByID = `-- name: GetOrderByID :one
SELECT id, gig_id, buyer_id, seller_id, status, total_price, order_date, delivery_date, idempotency_key, created_at, updated_at FROM orders
WHERE id = $1
`

func (q *Queries) GetOrderByID(ctx context.Context, id uuid.UUID) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrderByID, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.GigID,
		&i.BuyerID,
		&i.SellerID,
		&i.Status,
		&i.TotalPrice,
		&i.OrderDate,
		&i.DeliveryDate,
		&i.IdempotencyKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderByIdempotency = `-- name: GetOrderByIdempotency :one
SELECT id, gig_id, buyer_id, seller_id, status, total_price, order_date, delivery_date, idempotency_key, created_at, updated_at FROM orders
WHERE idempotency_key = $1
`

func (q *Queries) GetOrderByIdempotency(ctx context.Context, idempotencyKey string) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrderByIdempotency, idempotencyKey)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.GigID,
		&i.BuyerID,
		&i.SellerID,
		&i.Status,
		&i.TotalPrice,
		&i.OrderDate,
		&i.DeliveryDate,
		&i.IdempotencyKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listOrdersByUser = `-- name: ListOrdersByUser :many
SELECT id, gig_id, buyer_id, seller_id, status, total_price, order_date, delivery_date, idempotency_key, created_at, updated_at FROM orders
WHERE buyer_id = $1 OR seller_id = $1
ORDER BY order_date DESC
`

func (q *Queries) ListOrdersByUser(ctx context.Context, buyerID uuid.UUID) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrdersByUser, buyerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.GigID,
			&i.BuyerID,
			&i.SellerID,
			&i.Status,
			&i.TotalPrice,
			&i.OrderDate,
			&i.DeliveryDate,
			&i.IdempotencyKey,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const submitOrderDelivery = `-- name: SubmitOrderDelivery :exec
UPDATE orders
SET status = 'delivered'
WHERE id = $1 AND status = 'active'
`

func (q *Queries) SubmitOrderDelivery(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, submitOrderDelivery, id)
	return err
}

const updateOrderStatus = `-- name: UpdateOrderStatus :exec
UPDATE orders
SET status = $2
WHERE id = $1
`

type UpdateOrderStatusParams struct {
	ID     uuid.UUID
	Status string
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderStatus, arg.ID, arg.Status)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: disputes.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createDispute = `-- name: CreateDispute :one
INSERT INTO disputes (order_id, user_id, reason)
VALUES ($1, $2, $3)
RETURNING id, order_id, user_id, reason, status, created_at
`

type CreateDisputeParams struct {
	OrderID uuid.UUID
	UserID  uuid.UUID
	Reason  string
}

func (q *Queries) CreateDispute(ctx context.Context, arg CreateDisputeParams) (Dispute, error) {
	row := q.db.QueryRowContext(ctx, createDispute, arg.OrderID, arg.UserID, arg.Reason)
	var i Dispute
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.UserID,
		&i.Reason,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getDisputeByID = `-- name: GetDisputeByID :one
SELECT id, order_id, user_id, reason, status, created_at FROM disputes
WHERE id = $1
`

func (q *Queries) GetDisputeByID(ctx context.Context, id uuid.UUID) (Dispute, error) {
	row := q.db.QueryRowContext(ctx, getDisputeByID, id)
	var i Dispute
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.UserID,
		&i.Reason,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getDisputeByOrderID = `-- name: GetDisputeByOrderID :one
SELECT id, order_id, user_id, reason, status, created_at FROM disputes WHERE order_id = $1
`

func (q *Queries) GetDisputeByOrderID(ctx context.Context, orderID uuid.UUID) (Dispute, error) {
	row := q.db.QueryRowContext(ctx, getDisputeByOrderID, orderID)
	var i Dispute
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.UserID,
		&i.Reason,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listDisputes = `-- name: ListDisputes :many
SELECT id, order_id, user_id, reason, status, created_at FROM disputes ORDER BY created_at DESC
`

func (q *Queries) ListDisputes(ctx context.Context) ([]Dispute, error) {
	rows, err := q.db.QueryContext(ctx, listDisputes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Dispute
	for rows.Next() {
		var i Dispute
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.UserID,
			&i.Reason,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDisputeStatus = `-- name: UpdateDisputeStatus :exec
UPDATE disputes SET status = $2 WHERE id = $1
`

type UpdateDisputeStatusParams struct {
	ID     uuid.UUID
	Status string
}

func (q *Queries) UpdateDisputeStatus(ctx context.Context, arg UpdateDisputeStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateDisputeStatus, arg.ID, arg.Status)
	return err
}

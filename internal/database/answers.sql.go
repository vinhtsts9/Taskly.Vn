// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: answers.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createAnswer = `-- name: CreateAnswer :one
INSERT INTO answers (
  gig_id,
  user_id,
  question_id,
  answer
) VALUES (
  $1, $2, $3, $4
) RETURNING id, gig_id, user_id, question_id, answer, created_at, updated_at
`

type CreateAnswerParams struct {
	GigID      uuid.UUID
	UserID     uuid.UUID
	QuestionID uuid.UUID
	Answer     string
}

func (q *Queries) CreateAnswer(ctx context.Context, arg CreateAnswerParams) (Answer, error) {
	row := q.db.QueryRowContext(ctx, createAnswer,
		arg.GigID,
		arg.UserID,
		arg.QuestionID,
		arg.Answer,
	)
	var i Answer
	err := row.Scan(
		&i.ID,
		&i.GigID,
		&i.UserID,
		&i.QuestionID,
		&i.Answer,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAnswersByOrderID = `-- name: GetAnswersByOrderID :many
SELECT 
  a.id, 
  a.gig_id, 
  a.user_id, 
  a.question_id, 
  a.answer, 
  a.created_at, 
  a.updated_at
FROM answers a
JOIN orders o ON a.gig_id = o.gig_id AND a.user_id = o.buyer_id
WHERE o.id = $1
`

func (q *Queries) GetAnswersByOrderID(ctx context.Context, id uuid.UUID) ([]Answer, error) {
	rows, err := q.db.QueryContext(ctx, getAnswersByOrderID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Answer
	for rows.Next() {
		var i Answer
		if err := rows.Scan(
			&i.ID,
			&i.GigID,
			&i.UserID,
			&i.QuestionID,
			&i.Answer,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: gigs.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createService = `-- name: CreateService :one
INSERT INTO gigs (
  user_id, title, description, category_id, price, delivery_time, image_url, status
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, user_id, title, description, category_id, price, delivery_time, image_url, status, created_at
`

type CreateServiceParams struct {
	UserID       uuid.UUID
	Title        string
	Description  string
	CategoryID   int32
	Price        float64
	DeliveryTime int32
	ImageUrl     sql.NullString
	Status       string
}

func (q *Queries) CreateService(ctx context.Context, arg CreateServiceParams) (Gig, error) {
	row := q.db.QueryRowContext(ctx, createService,
		arg.UserID,
		arg.Title,
		arg.Description,
		arg.CategoryID,
		arg.Price,
		arg.DeliveryTime,
		arg.ImageUrl,
		arg.Status,
	)
	var i Gig
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.CategoryID,
		&i.Price,
		&i.DeliveryTime,
		&i.ImageUrl,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteService = `-- name: DeleteService :exec
DELETE FROM gigs WHERE id = $1
`

func (q *Queries) DeleteService(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteService, id)
	return err
}

const getService = `-- name: GetService :one
SELECT
    g.id,
    g.user_id,
    g.title,
    g.description,
    g.price,
    g.delivery_time,
    g.image_url,
    g.status,
    g.created_at,
    c.name AS category_name,
    u.names AS user_name,
    u.profile_pic AS user_profile_pic
FROM
    gigs g
JOIN
    users u ON g.user_id = u.id
JOIN
    categories c ON g.category_id = c.id
WHERE
    g.id = $1
`

type GetServiceRow struct {
	ID             uuid.UUID
	UserID         uuid.UUID
	Title          string
	Description    string
	Price          float64
	DeliveryTime   int32
	ImageUrl       sql.NullString
	Status         string
	CreatedAt      time.Time
	CategoryName   string
	UserName       string
	UserProfilePic sql.NullString
}

func (q *Queries) GetService(ctx context.Context, id uuid.UUID) (GetServiceRow, error) {
	row := q.db.QueryRowContext(ctx, getService, id)
	var i GetServiceRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.Price,
		&i.DeliveryTime,
		&i.ImageUrl,
		&i.Status,
		&i.CreatedAt,
		&i.CategoryName,
		&i.UserName,
		&i.UserProfilePic,
	)
	return i, err
}

const updateService = `-- name: UpdateService :one
UPDATE gigs
SET
  title = $2,
  description = $3,
  category_id = $4,
  price = $5,
  delivery_time = $6,
  image_url = $7,
  status = $8
WHERE id = $1
RETURNING id, user_id, title, description, category_id, price, delivery_time, image_url, status, created_at
`

type UpdateServiceParams struct {
	ID           uuid.UUID
	Title        string
	Description  string
	CategoryID   int32
	Price        float64
	DeliveryTime int32
	ImageUrl     sql.NullString
	Status       string
}

func (q *Queries) UpdateService(ctx context.Context, arg UpdateServiceParams) (Gig, error) {
	row := q.db.QueryRowContext(ctx, updateService,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.CategoryID,
		arg.Price,
		arg.DeliveryTime,
		arg.ImageUrl,
		arg.Status,
	)
	var i Gig
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.CategoryID,
		&i.Price,
		&i.DeliveryTime,
		&i.ImageUrl,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

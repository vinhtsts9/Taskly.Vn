// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

type VerifyTypeEnum string

const (
	VerifyTypeEnumEmail VerifyTypeEnum = "email"
	VerifyTypeEnumPhone VerifyTypeEnum = "phone"
)

func (e *VerifyTypeEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = VerifyTypeEnum(s)
	case string:
		*e = VerifyTypeEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for VerifyTypeEnum: %T", src)
	}
	return nil
}

type NullVerifyTypeEnum struct {
	VerifyTypeEnum VerifyTypeEnum
	Valid          bool // Valid is true if VerifyTypeEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullVerifyTypeEnum) Scan(value interface{}) error {
	if value == nil {
		ns.VerifyTypeEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.VerifyTypeEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullVerifyTypeEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.VerifyTypeEnum), nil
}

type Answer struct {
	ID         uuid.UUID
	GigID      uuid.UUID
	UserID     uuid.UUID
	QuestionID uuid.UUID
	Answer     string
	CreatedAt  time.Time
	UpdatedAt  time.Time
}

type Category struct {
	ID       int32
	Name     string
	ParentID sql.NullInt32
}

type Dispute struct {
	ID        uuid.UUID
	OrderID   uuid.UUID
	UserID    uuid.UUID
	Reason    string
	Status    interface{}
	CreatedAt time.Time
}

type Gig struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	Title       string
	Status      string
	CreatedAt   time.Time
	CategoryID  []int32
	ImageUrl    []string
	UpdatedAt   time.Time
	Description string
	PricingMode string
}

type GigPackage struct {
	ID           uuid.UUID
	GigID        uuid.UUID
	Tier         string
	Price        float64
	DeliveryTime int32
	Options      pqtype.NullRawMessage
}

type GigRequirement struct {
	ID       uuid.UUID
	GigID    uuid.UUID
	Question string
	Required bool
}

type Message struct {
	ID         uuid.UUID
	RoomID     uuid.UUID
	SenderID   uuid.UUID
	ReceiverID uuid.UUID
	Content    string
	SentAt     time.Time
}

type MessageAttachment struct {
	ID         uuid.UUID
	MessageID  uuid.UUID
	FileUrl    string
	FileType   sql.NullString
	FileName   sql.NullString
	UploadedAt sql.NullTime
}

type Order struct {
	ID           uuid.UUID
	GigID        uuid.UUID
	BuyerID      uuid.UUID
	SellerID     uuid.UUID
	Status       string
	TotalPrice   float64
	OrderDate    time.Time
	DeliveryDate sql.NullTime
}

type Permission struct {
	ID        uuid.UUID
	Name      string
	Resource  string
	Action    string
	CreatedAt time.Time
	UpdatedAt time.Time
}

type Review struct {
	ID        uuid.UUID
	GigID     uuid.UUID
	Reviewer  uuid.UUID
	Rating    int32
	Comment   sql.NullString
	CreatedAt sql.NullTime
}

type Role struct {
	ID        uuid.UUID
	RoleName  string
	CreatedAt time.Time
	UpdatedAt time.Time
}

type RolePermission struct {
	RoleID       uuid.UUID
	PermissionID uuid.UUID
}

type Room struct {
	ID        uuid.UUID
	User1ID   uuid.UUID
	User2ID   uuid.UUID
	CreatedAt time.Time
}

type User struct {
	ID         uuid.UUID
	UserBaseID uuid.UUID
	Names      string
	ProfilePic sql.NullString
	Bio        sql.NullString
	CreatedAt  time.Time
	UpdatedAt  time.Time
}

type UserBase struct {
	UserBaseID         uuid.UUID
	Email              string
	Salt               string
	Passwords          string
	IsTwoFactorEnabled int16
	LoginTime          sql.NullTime
	LogoutTime         sql.NullTime
	LoginIp            string
	States             int16
	RefreshToken       string
	CreatedAt          time.Time
	UpdatedAt          time.Time
}

type UserRole struct {
	UserID    uuid.UUID
	RoleID    uuid.UUID
	CreatedAt time.Time
}

type UserVerify struct {
	ID            uuid.UUID
	VerifyKey     string
	VerifyHashKey string
	VerifyOtp     string
	VerifyType    VerifyTypeEnum
	IsDeleted     bool
	IsVerified    bool
	CreatedAt     time.Time
	UpdatedAt     time.Time
}

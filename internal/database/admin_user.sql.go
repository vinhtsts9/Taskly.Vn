// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: admin_user.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const adminCountUsers = `-- name: AdminCountUsers :one
SELECT COUNT(*)
FROM users u
JOIN user_base b ON u.user_base_id = b.user_base_id
WHERE ($1 = '' OR LOWER(u.names) LIKE LOWER('%' || $1 || '%') OR LOWER(b.email) LIKE LOWER('%' || $1 || '%'))
`

func (q *Queries) AdminCountUsers(ctx context.Context, dollar_1 interface{}) (int64, error) {
	row := q.db.QueryRowContext(ctx, adminCountUsers, dollar_1)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const adminListUsers = `-- name: AdminListUsers :many
SELECT 
    u.id,
    u.names,
    COALESCE(u.profile_pic,'') as profile_pic,
    u.created_at,
    b.email,
    b.states,
    COALESCE(r.role_name,'')
FROM users u
JOIN user_base b ON u.user_base_id = b.user_base_id 
LEFT JOIN user_roles ur ON ur.user_id = u.id
LEFT JOIN roles r ON r.id = ur.role_id
WHERE ($1 = '' OR LOWER(u.names) LIKE LOWER('%' || $1 || '%') OR LOWER(b.email) LIKE LOWER('%' || $1 || '%'))
ORDER BY u.created_at DESC
LIMIT $2 OFFSET $3
`

type AdminListUsersParams struct {
	Column1 interface{}
	Limit   int32
	Offset  int32
}

type AdminListUsersRow struct {
	ID         uuid.UUID
	Names      string
	ProfilePic string
	CreatedAt  time.Time
	Email      string
	States     int16
	RoleName   string
}

func (q *Queries) AdminListUsers(ctx context.Context, arg AdminListUsersParams) ([]AdminListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, adminListUsers, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AdminListUsersRow
	for rows.Next() {
		var i AdminListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Names,
			&i.ProfilePic,
			&i.CreatedAt,
			&i.Email,
			&i.States,
			&i.RoleName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

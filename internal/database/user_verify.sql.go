// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_verify.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const checkOTPVerifyExist = `-- name: CheckOTPVerifyExist :one
SELECT EXISTS (
    SELECT 1 FROM user_verify
    WHERE verify_key = $1 AND is_deleted = false
)
`

func (q *Queries) CheckOTPVerifyExist(ctx context.Context, verifyKey string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkOTPVerifyExist, verifyKey)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getInfoOTP = `-- name: GetInfoOTP :one
SELECT verify_otp, verify_key, verify_hash_key, verify_type, is_verified, is_deleted
FROM user_verify
WHERE verify_hash_key = $1
`

type GetInfoOTPRow struct {
	VerifyOtp     string
	VerifyKey     string
	VerifyHashKey string
	VerifyType    VerifyTypeEnum
	IsVerified    bool
	IsDeleted     bool
}

func (q *Queries) GetInfoOTP(ctx context.Context, verifyHashKey string) (GetInfoOTPRow, error) {
	row := q.db.QueryRowContext(ctx, getInfoOTP, verifyHashKey)
	var i GetInfoOTPRow
	err := row.Scan(
		&i.VerifyOtp,
		&i.VerifyKey,
		&i.VerifyHashKey,
		&i.VerifyType,
		&i.IsVerified,
		&i.IsDeleted,
	)
	return i, err
}

const insertOTPVerify = `-- name: InsertOTPVerify :one
INSERT INTO user_verify (
    verify_key,
    verify_hash_key,
    verify_otp,
    verify_type
)
VALUES (
    $1, $2, $3, $4
)
RETURNING id
`

type InsertOTPVerifyParams struct {
	VerifyKey     string
	VerifyHashKey string
	VerifyOtp     string
	VerifyType    VerifyTypeEnum
}

func (q *Queries) InsertOTPVerify(ctx context.Context, arg InsertOTPVerifyParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, insertOTPVerify,
		arg.VerifyKey,
		arg.VerifyHashKey,
		arg.VerifyOtp,
		arg.VerifyType,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updateUserVerificationStatus = `-- name: UpdateUserVerificationStatus :exec
UPDATE user_verify
SET is_verified = true,
    updated_at = now()
WHERE verify_hash_key = $1
`

func (q *Queries) UpdateUserVerificationStatus(ctx context.Context, verifyHashKey string) error {
	_, err := q.db.ExecContext(ctx, updateUserVerificationStatus, verifyHashKey)
	return err
}
